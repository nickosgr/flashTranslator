/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nick.flashtranslator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonIOException;
import com.google.gson.JsonSyntaxException;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.DataFormatException;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author nick
 */
public class TranslationFrame extends javax.swing.JFrame {

    private final ResourceBundle bundle;
    public static final String PROJECT_EXTENSION = "jfp";

    private Project project;
    private File projectFile;
    private boolean autoCopy = true;
    //private List<Translatable> currentItems;
    private Translatable lastSelected;
    //private Movie movie;
    private JFileChooser fileChooser = new JFileChooser("./"); //NOI18N

    /**
     * Creates new form NewJFrame
     */
    public TranslationFrame() {
        bundle = ResourceBundle.getBundle("Bundle");
        initComponents();
        clearGui();
        fileChooserSet(Mode.PROJECT);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        autoCopy = Boolean.parseBoolean(FlashTranslator.settings.getProperty("auto_copy", "True"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        saveFileButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sourceTextArea = new javax.swing.JTextArea();
        translatedPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        translatedTextArea = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textList = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        projectMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        newProjectMenu = new javax.swing.JMenuItem();
        addFlashMenu = new javax.swing.JMenuItem();
        saveProjectMenu = new javax.swing.JMenuItem();
        saveProjectMenu1 = new javax.swing.JMenuItem();
        exportTranslatedMenu = new javax.swing.JMenuItem();
        closeProjectMenu = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        selectProjectFileMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoMenu = new javax.swing.JMenuItem();
        redoMenu = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        goToMenu = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        setTitle(bundle.getString("TITLE")); // NOI18N

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        saveFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/action_save.gif"))); // NOI18N
        saveFileButton.setToolTipText(bundle.getString("SAVE_PROJECT")); // NOI18N
        saveFileButton.setFocusable(false);
        saveFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(saveFileButton);
        jToolBar2.add(jSeparator2);
        jToolBar2.add(jLabel1);

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.setOneTouchExpandable(true);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("SOURCE"))); // NOI18N

        sourceTextArea.setEditable(false);
        sourceTextArea.setBackground(new java.awt.Color(233, 233, 233));
        sourceTextArea.setColumns(20);
        sourceTextArea.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sourceTextArea.setRows(5);
        sourceTextArea.setText("Some text is going to appear here\n");
        jScrollPane1.setViewportView(sourceTextArea);

        translatedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("TRANSLATED"))); // NOI18N
        translatedPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane3.setBorder(null);

        translatedTextArea.setColumns(20);
        translatedTextArea.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        translatedTextArea.setRows(5);
        translatedTextArea.setText("Text translation from the source.");
        jScrollPane3.setViewportView(translatedTextArea);

        translatedPanel.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/action_back.gif"))); // NOI18N
        jButton4.setToolTipText(bundle.getString("PREVIOUS")); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/action_forward.gif"))); // NOI18N
        jButton3.setToolTipText(bundle.getString("NEXT")); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);
        jToolBar1.add(jSeparator3);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/page_text_delete.gif"))); // NOI18N
        jButton5.setToolTipText(bundle.getString("CLEAR")); // NOI18N
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/action_refresh.gif"))); // NOI18N
        jButton6.setToolTipText(bundle.getString("RESTORE")); // NOI18N
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);

        translatedPanel.add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                    .addComponent(translatedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1, 1, 1))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(translatedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel3);

        jPanel2.setLayout(new java.awt.BorderLayout());

        textList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("F_TEXTFIELDS"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION)); // NOI18N
        textList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        textList.setModel(new DefaultListModel<Translatable>());
        textList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                textListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(textList);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jButton1.setText(bundle.getString("SELECT")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setLeftComponent(jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1))
        );

        projectMenu.setText(bundle.getString("PROJECT")); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText(bundle.getString("OPEN")); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        projectMenu.add(jMenuItem1);

        newProjectMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        newProjectMenu.setText(bundle.getString("NEW_PROJECT")); // NOI18N
        newProjectMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectMenuActionPerformed(evt);
            }
        });
        projectMenu.add(newProjectMenu);

        addFlashMenu.setText(bundle.getString("ADD_FLASH")); // NOI18N
        addFlashMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFlashMenuActionPerformed(evt);
            }
        });
        projectMenu.add(addFlashMenu);

        saveProjectMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveProjectMenu.setText(bundle.getString("SAVE_PROJECT")); // NOI18N
        saveProjectMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectMenuActionPerformed(evt);
            }
        });
        projectMenu.add(saveProjectMenu);

        saveProjectMenu1.setText(bundle.getString("SAVE_PROJECT_AS")); // NOI18N
        saveProjectMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectMenu1ActionPerformed(evt);
            }
        });
        projectMenu.add(saveProjectMenu1);

        exportTranslatedMenu.setText(bundle.getString("EXPORT_FLASH")); // NOI18N
        exportTranslatedMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTranslatedMenuActionPerformed(evt);
            }
        });
        projectMenu.add(exportTranslatedMenu);

        closeProjectMenu.setText(bundle.getString("CLOSE")); // NOI18N
        closeProjectMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeProjectMenuActionPerformed(evt);
            }
        });
        projectMenu.add(closeProjectMenu);
        projectMenu.add(jSeparator5);

        selectProjectFileMenu.setText(bundle.getString("SELECT")); // NOI18N
        selectProjectFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectProjectFileMenuActionPerformed(evt);
            }
        });
        projectMenu.add(selectProjectFileMenu);
        projectMenu.add(jSeparator1);

        jMenuItem5.setText(bundle.getString("EXIT")); // NOI18N
        projectMenu.add(jMenuItem5);

        jMenuBar1.add(projectMenu);

        editMenu.setText(bundle.getString("EDIT")); // NOI18N

        undoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenu.setText(bundle.getString("UNDO")); // NOI18N
        undoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuActionPerformed(evt);
            }
        });
        editMenu.add(undoMenu);

        redoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoMenu.setText(bundle.getString("REDO")); // NOI18N
        redoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuActionPerformed(evt);
            }
        });
        editMenu.add(redoMenu);
        editMenu.add(jSeparator4);

        jMenuItem2.setText(bundle.getString("SETTINGS")); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItem2);

        jMenuBar1.add(editMenu);

        goToMenu.setText(bundle.getString("GOTO")); // NOI18N

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DOWN, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem3.setText(bundle.getString("NEXT")); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        goToMenu.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_UP, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setText(bundle.getString("PREVIOUS")); // NOI18N
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        goToMenu.add(jMenuItem4);

        jMenuBar1.add(goToMenu);

        aboutMenu.setText(bundle.getString("ABOUT")); // NOI18N

        jMenuItem8.setText(bundle.getString("TRANSLATOR")); // NOI18N
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        aboutMenu.add(jMenuItem8);

        jMenuBar1.add(aboutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_textListValueChanged
        Translatable tra = (Translatable) textList.getSelectedValue();
        if (lastSelected != null) {
            translatedTextArea.getDocument().removeUndoableEditListener(tra);
            lastSelected.setTranslatedText(translatedTextArea.getText());
            lastSelected.getUndoManager().discardAllEdits();
        }
        lastSelected = tra;

        sourceTextArea.setText(tra.getOriginalText());
        sourceTextArea.setCaretPosition(0);

        if (autoCopy
                || !tra.getTranslatedText().equals(tra.getOriginalText())) {
            translatedTextArea.setText(tra.getTranslatedText());
        }
        //translatedTextArea.setText(tra.getTranslatedText());
        translatedTextArea.setCaretPosition(0);
        translatedTextArea.getDocument().addUndoableEditListener(tra);

    }//GEN-LAST:event_textListValueChanged

    private void addFlashMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFlashMenuActionPerformed
        newProjectOption();
    }//GEN-LAST:event_addFlashMenuActionPerformed


    private void exportTranslatedMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTranslatedMenuActionPerformed

        try {
            exportProjectFiles();
        } catch (IOException ex) {
            Logger.getLogger(TranslationFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DataFormatException ex) {
            Logger.getLogger(TranslationFrame.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_exportTranslatedMenuActionPerformed

    private void quickFix() {
        next();
        previous();
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        previous();
    }//GEN-LAST:event_jButton4ActionPerformed

    public void previous() {
        if (textList.getSelectedIndex() > 0) {
            textList.setSelectedIndex(textList.getSelectedIndex() - 1);
        }
    }

    public void next() {
        if (textList.getSelectedIndex() < textList.getModel().getSize()) {
            textList.setSelectedIndex(textList.getSelectedIndex() + 1);
        }
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        next();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        translatedTextArea.setText(""); //NOI18N
        translatedTextArea.setCaretPosition(0);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        translatedTextArea.setText(sourceTextArea.getText());
        translatedTextArea.setCaretPosition(0);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void saveFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileButtonActionPerformed
        saveProject(false);
    }//GEN-LAST:event_saveFileButtonActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        previous();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        next();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void newProjectMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectMenuActionPerformed
        newProjectOption();

    }//GEN-LAST:event_newProjectMenuActionPerformed

    private void selectProjectFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectProjectFileMenuActionPerformed
        switchFromProject();
    }//GEN-LAST:event_selectProjectFileMenuActionPerformed

    private void saveProjectMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectMenuActionPerformed

        saveProject(false);

    }//GEN-LAST:event_saveProjectMenuActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        openProject();

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void closeProjectMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeProjectMenuActionPerformed
        if (saveContinue()) {
            clearGui();
        }
    }//GEN-LAST:event_closeProjectMenuActionPerformed

    private void saveProjectMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectMenu1ActionPerformed
        saveProject(true);
    }//GEN-LAST:event_saveProjectMenu1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        switchFromProject();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void redoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuActionPerformed
        redo();
    }//GEN-LAST:event_redoMenuActionPerformed

    private void undoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuActionPerformed
        undo();
    }//GEN-LAST:event_undoMenuActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        SettingsDialog dialog = new SettingsDialog(this, true);
        dialog.setVisible(true);
        if (dialog.getReturnStatus() == SettingsDialog.RET_OK) {
            autoCopy = Boolean.parseBoolean(FlashTranslator.settings.getProperty("auto_copy", "True"));
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

        JOptionPane.showMessageDialog(this, "<html><h2>"
                + bundle.getString("AUTHOR") + ": Nikolaos Christou</h2>\n"
                + "<html><h2>" + bundle.getString("TRANSLATION") + "</h2>\n"
                + "<html><h2>" + bundle.getString("LIBRARIES") + ":</h2>\n"
                + " Google Gson Version 2.2.4\n"
                + " Flagstone Software's Transform library v3.0.2"
                + "\n\n"
                + "<html><h2>Copyright 2014 NIKOLAOS CHRISTOU</h2>\n"
                + "\n"
                + "Licensed under the Apache License, Version 2.0 (the \"License\");\n"
                + "you may not use this file except in compliance with the License.\n"
                + "You may obtain a copy of the License at\n"
                + "\n"
                + "    http://www.apache.org/licenses/LICENSE-2.0\n"
                + "\n"
                + "Unless required by applicable law or agreed to in writing, software\n"
                + "distributed under the License is distributed on an \"AS IS\" BASIS,\n"
                + "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
                + "See the License for the specific language governing permissions and\n"
                + "limitations under the License.</html>");
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void clearGui() {
        translatedTextArea.setText(""); //NOI18N
        sourceTextArea.setText(""); //NOI18N
        DefaultListModel<Translatable> listModel = (DefaultListModel<Translatable>) textList.getModel();
        listModel.clear();

    }

    private void saveProjectFile() {
        if (projectFile != null) {
            quickFix();
            GZIPOutputStream gout = null;
            try {
                gout = new GZIPOutputStream(new FileOutputStream(projectFile));
                Gson gson = new GsonBuilder().create();
                OutputStreamWriter writer = new OutputStreamWriter(gout);
                gson.toJson(project, writer);
                writer.flush();
                writer.close();

            } catch (FileNotFoundException ex) {
                Logger.getLogger(TranslationFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TranslationFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    gout.close();
                } catch (IOException ex) {
                    Logger.getLogger(TranslationFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }

    /**
     *
     * @param gui if true, the confirmation Dialog appears;
     * @return
     */
    private boolean saveContinue() {
        int confirmation = JOptionPane.showConfirmDialog(this,
                bundle.getString("SAVE_CHANGES"),
                bundle.getString("CHANGED"), JOptionPane.YES_NO_CANCEL_OPTION);
        if (confirmation == JOptionPane.NO_OPTION) {
            return true;
        }
        if (confirmation == JOptionPane.CANCEL_OPTION) {
            return false;
        } else {
            saveProject(false);
            return true;
        }

    }

    private void undo() {
        if (lastSelected != null && lastSelected.getUndoManager().canUndo()) {
            lastSelected.getUndoManager().undo();
        }
    }

    private void redo() {
        if (lastSelected != null && lastSelected.getUndoManager().canRedo()) {
            lastSelected.getUndoManager().redo();
        }
    }

    private void saveProject(boolean forceSaveAs) {
        if (project != null) {
            if (projectFile == null || forceSaveAs) {
                fileChooserSet(Mode.PROJECT);
                int answer = fileChooser.showSaveDialog(this);
                if (answer == JFileChooser.APPROVE_OPTION) {
                    projectFile = fileChooser.getSelectedFile();
                    if (!projectFile.getAbsolutePath().toLowerCase()
                            .endsWith("." + PROJECT_EXTENSION)) {
                        projectFile = new File(projectFile.getAbsolutePath() + "." + PROJECT_EXTENSION);
                    }
                } else {
                    return;
                }

            }
            saveProjectFile();
        }
    }

    private enum Mode {

        PROJECT,
        FLASH,
        FOLDER
    }

    private void fileChooserSet(Mode m) {
        fileChooser = new JFileChooser(fileChooser.getCurrentDirectory());

        switch (m) {
            case FLASH:
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                fileChooser.setFileFilter(new FileNameExtensionFilter(java.util.ResourceBundle.getBundle("Bundle").getString("FLASH"), "swf")); //NOI18N
                fileChooser.setMultiSelectionEnabled(true);
                break;
            case PROJECT:
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                fileChooser.setFileFilter(new FileNameExtensionFilter(bundle.getString("PROJECT_SAVE"), PROJECT_EXTENSION)); //NOI18N
                fileChooser.setMultiSelectionEnabled(false);
                break;
            case FOLDER:
                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                fileChooser.setMultiSelectionEnabled(false);
                break;
        }
    }

    private void openProject() throws JsonIOException, JsonSyntaxException {
        fileChooserSet(Mode.PROJECT);
        try {
            Gson gson = new GsonBuilder().create();
            int open = fileChooser.showOpenDialog(this);
            if (open == JFileChooser.APPROVE_OPTION) {
                projectFile = fileChooser.getSelectedFile();
                GZIPInputStream gIn = new GZIPInputStream(new FileInputStream(projectFile));
                Project fromJson = gson.fromJson(new InputStreamReader(gIn), Project.class);
                project = fromJson;
                projectLoadingThread(true);
                gIn.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(TranslationFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void projectLoadingThread(final boolean prepare) {
        Runnable runnable = new Runnable() {
            public void run() {
                try {
                    if (prepare) {
                        project.prepare();
                    }
                    loadCurrentFile();
                    repaint();
                } catch (DataFormatException ex) {
                    Logger.getLogger(TranslationFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(TranslationFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        };
        new Thread(runnable, "preparationThread").start(); //NOI18N
    }

    private boolean newProject() throws HeadlessException {
        fileChooserSet(Mode.FLASH);
        int answer = fileChooser.showOpenDialog(this);
        if (answer == JFileChooser.APPROVE_OPTION) {
            //movie = new Movie();
            try {
                project = new Project();
                for (File file : fileChooser.getSelectedFiles()) {
                    project.addFile(file);
                }

                return true;
            } catch (DataFormatException ex) {
                Logger.getLogger(TranslationFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TranslationFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }

    private void newProjectOption() throws HeadlessException {
        if (project == null || project.changed()) {
            if (newProject()) {
                switchFromProject();
            }
        }
    }

    private void switchFromProject() {
        FlashItem selection = SwitchFlashDialog.showSelectDialog(this, project.getItems());

        if (selection != null) {
            project.setCurrent(selection);
            loadCurrentFile();
        }
    }

    private void loadCurrentFile() {
        jLabel1.setText(project.getCurrentItem().getOriginalFile());
        textList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        textList.setModel(project.getCurrentItem().makeModel());
        textList.setSelectedIndex(0);
    }

    private void exportProjectFiles() throws IOException, DataFormatException {
        quickFix();
        fileChooserSet(Mode.FOLDER);
        int answer = fileChooser.showOpenDialog(this);
        if (answer == JFileChooser.APPROVE_OPTION) {
            File folder = fileChooser.getSelectedFile();
            for (FlashItem flashItem : project.getItems()) {
                flashItem.exportTo(folder);
            }
            project.prepare();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem addFlashMenu;
    private javax.swing.JMenuItem closeProjectMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exportTranslatedMenu;
    private javax.swing.JMenu goToMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JMenuItem newProjectMenu;
    private javax.swing.JMenu projectMenu;
    private javax.swing.JMenuItem redoMenu;
    private javax.swing.JButton saveFileButton;
    private javax.swing.JMenuItem saveProjectMenu;
    private javax.swing.JMenuItem saveProjectMenu1;
    private javax.swing.JMenuItem selectProjectFileMenu;
    private javax.swing.JTextArea sourceTextArea;
    private javax.swing.JList textList;
    private javax.swing.JPanel translatedPanel;
    private javax.swing.JTextArea translatedTextArea;
    private javax.swing.JMenuItem undoMenu;
    // End of variables declaration//GEN-END:variables
}
